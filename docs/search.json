[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Atanu Bhattacharjee. Author, maintainer, contributor. Bhrigu Kumar Rajbongshi. Author, contributor. Gajendra K Vishwakarma. Author, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bhattacharjee , Rajbongshi B, Vishwakarma G (2023). jmBIG: Joint Longitudinal Survival Model Big Data. R package version 0.1.1, https://CRAN.R-project.org/package=jmBIG.","code":"@Manual{,   title = {jmBIG: Joint Longitudinal and Survival Model for Big Data},   author = {Atanu Bhattacharjee and Bhrigu Kumar Rajbongshi and Gajendra K Vishwakarma},   year = {2023},   note = {R package version 0.1.1},   url = {https://CRAN.R-project.org/package=jmBIG}, }"},{"path":"/index.html","id":"jmbig-joint-longitudinal-and-survival-models-for-big-data","dir":"","previous_headings":"","what":"MIIPW","title":"MIIPW","text":"jmBIG R package provides flexible, modular framework joint modeling longitudinal time--event data, specifically optimized large datasets commonly found real-world clinical biomedical studies.","code":""},{"path":"/index.html","id":"id_-features","dir":"","previous_headings":"","what":"âœ¨ Features","title":"MIIPW","text":"ðŸ§  Joint modeling longitudinal biomarkers survival outcomes âš¡ Big data readiness: designed efficiency large sample sizes JMbayes2 (Bayesian joint modeling) FastJM (Frequentist joint modeling) rstanarm (Bayesian GLMMs) joineRML (MLE-based methods) Individual survival probabilities Longitudinal trajectories Dynamic predictions Bootstrapped confidence intervals Visual summaries","code":""},{"path":[]},{"path":"/index.html","id":"from-github-development-version","dir":"","previous_headings":"ðŸ“¦ Installation","what":"From GitHub (development version)","title":"MIIPW","text":"","code":"# If not already installed install.packages(\"remotes\")  # Install jmBIG from GitHub remotes::install_github(\"kumarbhrigu/jmBIG\")"},{"path":"/reference/jmbayesBig.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"function joint model BIG DATA using JMbayes2","code":""},{"path":"/reference/jmbayesBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"","code":"jmbayesBig(   dtlong,   dtsurv,   longm,   survm,   samplesize = 50,   rd,   timeVar,   nchain = 1,   id,   niter = 2000,   nburnin = 1000 )"},{"path":"/reference/jmbayesBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"dtlong longitudinal dataset, contains id,visit time,longitudinal measurements along various covariates dtsurv survival dataset corresponding longitudinal dataset, survival status survival time longm fixed effect model longitudinal response survm survival model samplesize sample size divide Big data rd random effect model part timeVar time variable longitudinal model, included longitudinal data nchain number chain MCMC id name id column longitudinal dataset niter number iteration MCMC chain nburnin number burnin sample MCMC chain","code":""},{"path":"/reference/jmbayesBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"returns list containing various output useful prediction.","code":""},{"path":"/reference/jmbayesBig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"Rizopoulos, D., G. Papageorgiou, P. Miranda Afonso. \"JMbayes2: extended joint models longitudinal time--event data.\" R package version 0.2-4 (2022).","code":""},{"path":[]},{"path":"/reference/jmbayesBig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"Atanu Bhattacharjee, Bhrigu Kumar Rajbongshi Gajendra Kumar Vishwakarma","code":""},{"path":"/reference/jmbayesBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"","code":"# \\donttest{ ## library(survival) #> Warning: package 'survival' was built under R version 4.3.3 library(nlme) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:nlme': #>  #>     collapse #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union fit5<-jmbayesBig(dtlong=long2,dtsurv = surv2,longm=y~ x7+visit,survm=Surv(time,status)~x1+visit, rd= ~ visit|id,timeVar='visit',nchain=1,samplesize=200,id='id') ydt<-long2%>%filter(id%in%c(900)) cdt<-surv2[,'id']%>%filter(id%in%c(900)) newdata<-full_join(ydt,cdt,by='id') P2<-predJMbayes(model<-fit5,ids<-c(900),newdata=newdata,process = 'event') plot(P2$p1[[1]])  ## # }"},{"path":"/reference/jmcsBig.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint model for BIG data using FastJM â€” jmcsBig","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"function joint model BIG DATA using FastJM","code":""},{"path":"/reference/jmcsBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"","code":"jmcsBig(dtlong, dtsurv, longm, survm, samplesize = 50, rd, id)"},{"path":"/reference/jmcsBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"dtlong longitudinal dataset, contains id,visit time,longitudinal measurements along various covariates dtsurv survival dataset corresponding longitudinal dataset, survival status survival time longm model longitudinal response survm survival model samplesize sample size divide Big data rd random effect part id name id column longitudinal dataset","code":""},{"path":"/reference/jmcsBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"returns list containing various output useful prediction.","code":""},{"path":"/reference/jmcsBig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"Li, Shanpeng, et al. \"Efficient Algorithms Implementation Semiparametric Joint Model Longitudinal Competing Risk Data: Applications Massive Biobank Data.\" Computational Mathematical Methods Medicine 2022 (2022).","code":""},{"path":[]},{"path":"/reference/jmcsBig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"Atanu Bhattacharjee, Bhrigu Kumar Rajbongshi Gajendra Kumar Vishwakarma","code":""},{"path":"/reference/jmcsBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) fit2<-jmcsBig(dtlong=data.frame(long2),dtsurv = data.frame(surv2), longm=y~ x7+visit,survm=Surv(time,status)~x1+visit,rd= ~ visit|id,samplesize=200,id='id') P2<-survfitJMCS(model<-fit2,ids<-c(400),estimator = 'median') #> Error in survfitJMCS(model <- fit2, ids <- c(400), estimator = \"median\"): unused argument (estimator = \"median\") plot(P2$p1[[1]],estimator=\"both\",include.y = TRUE) #> Error in eval(expr, envir, enclos): object 'P2' not found ##   # }"},{"path":"/reference/jmstanBig.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint model for BIG data using rstanarm â€” jmstanBig","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"function joint model BIG DATA using rstanarm package","code":""},{"path":"/reference/jmstanBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"","code":"jmstanBig(   dtlong,   dtsurv,   longm,   survm,   samplesize = 50,   time_var,   id,   nchain = 1,   refresh = 2000 )"},{"path":"/reference/jmstanBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"dtlong longitudinal dataset, contains id,visit time,longitudinal measurements along various covariates dtsurv survival dataset corresponding longitudinal dataset, survival status survival time longm model longitudinal response survm survival model samplesize sample size divide Big data time_var time variable longitudinal model, included longitudinal data id name id column longitudinal dataset nchain number chain MCMC refresh refresh rate MCMC chain","code":""},{"path":"/reference/jmstanBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"returns list containing various output useful prediction.","code":""},{"path":"/reference/jmstanBig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"Goodrich, B., et al. \"rstanarm: Bayesian applied regression modeling via Stan. R package version 2.17. 4.\" Online< http://mc-stan. org (2018).","code":""},{"path":[]},{"path":"/reference/jmstanBig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"Atanu Bhattacharjee, Bhrigu Kumar Rajbongshi Gajendra Kumar Vishwakarma","code":""},{"path":"/reference/jmstanBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) fit3<-jmstanBig(dtlong=long2,dtsurv = surv2,longm=y~ x7+visit+(1|id), survm=Surv(time,status)~x1+visit,samplesize=200,time_var='visit',id='id') #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.003117 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 31.17 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 30.536 seconds (Warm-up) #> Chain 1:                11.33 seconds (Sampling) #> Chain 1:                41.866 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.001247 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 12.47 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 32.104 seconds (Warm-up) #> Chain 1:                19.457 seconds (Sampling) #> Chain 1:                51.561 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000758 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.58 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 40.42 seconds (Warm-up) #> Chain 1:                11.392 seconds (Sampling) #> Chain 1:                51.812 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000821 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.21 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 39.467 seconds (Warm-up) #> Chain 1:                11.893 seconds (Sampling) #> Chain 1:                51.36 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000712 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.12 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 33.699 seconds (Warm-up) #> Chain 1:                15.495 seconds (Sampling) #> Chain 1:                49.194 seconds (Total) #> Chain 1:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess P2<-postTraj(model<-fit3,m<-1,ids<-c(1,2,100)) pp1<-plot(P2$p1[[1]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' pp2<-plot(P2$p1[[2]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' pp3<-plot(P2$p1[[3]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' ## # }"},{"path":"/reference/joinRMLBig.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint model for BIG data using joineRML â€” joinRMLBig","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"function joint model BIG DATA using joineRML","code":""},{"path":"/reference/joinRMLBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"","code":"joinRMLBig(dtlong, dtsurv, longm, survm, samplesize = 50, rd, timeVar, id)"},{"path":"/reference/joinRMLBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"dtlong longitudinal dataset, contains id,visit time,longitudinal measurements along various covariates dtsurv survival dataset corresponding longitudinal dataset, survival status survival time longm model longitudinal response survm survival model samplesize random effect part rd random effect part timeVar time variable longitudinal model, included longitudinal data id name id column longitudinal dataset","code":""},{"path":"/reference/joinRMLBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"returns list containing various output useful prediction.","code":""},{"path":"/reference/joinRMLBig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"Hickey, Graeme L., et al. \"joineRML: joint model software package time--event multivariate longitudinal outcomes.\" BMC medical research methodology 18 (2018): 1-14.","code":""},{"path":[]},{"path":"/reference/joinRMLBig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"Atanu Bhattacharjee, Bhrigu Kumar Rajbongshi Gajendra Kumar Vishwakarma","code":""},{"path":"/reference/joinRMLBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) fit4<-joinRMLBig(dtlong=long2,dtsurv = surv2,longm=y~ x7+visit,survm=Surv(time,status)~x1+visit, rd=~ visit|id,timeVar='visit',samplesize=200,id='id') #> Error in mjoint(formLongFixed = longm, formLongRandom = rd, formSurv = survm,     data = dtlong1[[i]], survData = dtsurv1[[i]], timeVar = timeVar): could not find function \"mjoint\" P2<-predJRML(model<-fit4,ids<-c(10),dtlong=long2,dtsurv=surv2) #> Error in eval(expr, envir, enclos): object 'fit4' not found pp1<-plot(P2$plong[[1]]) #> Error in eval(expr, envir, enclos): object 'P2' not found pp1<-plot(P2$psurv[[1]]) #> Error in eval(expr, envir, enclos): object 'P2' not found ##    # }"},{"path":"/reference/long2.html","id":null,"dir":"Reference","previous_headings":"","what":"longitudinal data â€” long2","title":"longitudinal data â€” long2","text":"longitudinal dataset single marker , different numeric categorical covariate","code":""},{"path":"/reference/long2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"longitudinal data â€” long2","text":"","code":"data(long2)"},{"path":"/reference/long2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"longitudinal data â€” long2","text":"tibble 13 columns 5639 observations, id id value subjects status survival status time survival time y longitudinal marker visit visit time longitudinal measurements x1,x2,...,x7 different numeric categorical variable","code":""},{"path":"/reference/longsurv.html","id":null,"dir":"Reference","previous_headings":"","what":"longitudinal- survival dataset â€” longsurv","title":"longitudinal- survival dataset â€” longsurv","text":"longitudinal dataset single marker , different numeric categorical covariate","code":""},{"path":"/reference/longsurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"longitudinal- survival dataset â€” longsurv","text":"","code":"data(longsurv)"},{"path":"/reference/longsurv.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"longitudinal- survival dataset â€” longsurv","text":"tibble 13 columns 5639 observations, id id value subjects status survival status time survival time y longitudinal marker visit visit time longitudinal measurements x1,x2,...,x7 different numeric categorical variable","code":""},{"path":"/reference/postSurvfit.html","id":null,"dir":"Reference","previous_headings":"","what":"postSurvfit â€” postSurvfit","title":"postSurvfit â€” postSurvfit","text":"posterior survival probability estimates rstanarm BIG data","code":""},{"path":"/reference/postSurvfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"postSurvfit â€” postSurvfit","text":"","code":"postSurvfit(model, ids, ...)"},{"path":"/reference/postSurvfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"postSurvfit â€” postSurvfit","text":"model fitted model ids value id ... parameter option, see posterior_survfit","code":""},{"path":"/reference/postSurvfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"postSurvfit â€” postSurvfit","text":"list predicted value given id","code":""},{"path":"/reference/postSurvfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"postSurvfit â€” postSurvfit","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) jmstan<-jmstanBig(dtlong=long2,          dtsurv = surv2,          longm=y~ x7+visit+(1|id),          survm=Surv(time,status)~x1+visit,          samplesize=200,          time_var='visit',id='id') #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000985 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 9.85 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 34.67 seconds (Warm-up) #> Chain 1:                12.03 seconds (Sampling) #> Chain 1:                46.7 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000711 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.11 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 39.573 seconds (Warm-up) #> Chain 1:                24.083 seconds (Sampling) #> Chain 1:                63.656 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000934 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 9.34 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 48.182 seconds (Warm-up) #> Chain 1:                14.258 seconds (Sampling) #> Chain 1:                62.44 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.001256 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 12.56 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 36.347 seconds (Warm-up) #> Chain 1:                11.647 seconds (Sampling) #> Chain 1:                47.994 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000926 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 9.26 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 32.514 seconds (Warm-up) #> Chain 1:                17.026 seconds (Sampling) #> Chain 1:                49.54 seconds (Total) #> Chain 1:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess mod1<-jmstan P2<-postSurvfit(model<-mod1,ids<-c(1,2,210)) pp1<-plot(P2$p1[[1]]) pp1  pp2<-plot(P2$p1[[2]]) pp2  pp3<-plot(P2$p1[[3]]) pp3   ##    # }"},{"path":"/reference/postTraj.html","id":null,"dir":"Reference","previous_headings":"","what":"postTraj â€” postTraj","title":"postTraj â€” postTraj","text":"prediction posterio trajectory longitudinal marker using rstanarm Big data","code":""},{"path":"/reference/postTraj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"postTraj â€” postTraj","text":"","code":"postTraj(model, m, ids, ...)"},{"path":"/reference/postTraj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"postTraj â€” postTraj","text":"model fitted model object m m posterior_traj function ids value id ... parameter option, see posterior_traj","code":""},{"path":"/reference/postTraj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"postTraj â€” postTraj","text":"list predicted values given id","code":""},{"path":"/reference/postTraj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"postTraj â€” postTraj","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) fit6<-jmstanBig(dtlong=long2,dtsurv = surv2,longm=y~ x7+visit+(1|id),          survm=Surv(time,status)~x1+visit,samplesize=200,time_var='visit',id='id') #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000832 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.32 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 35.957 seconds (Warm-up) #> Chain 1:                18.019 seconds (Sampling) #> Chain 1:                53.976 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.00079 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.9 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 45.595 seconds (Warm-up) #> Chain 1:                27.324 seconds (Sampling) #> Chain 1:                72.919 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000724 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.24 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 39.902 seconds (Warm-up) #> Chain 1:                11.692 seconds (Sampling) #> Chain 1:                51.594 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000804 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.04 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 36.135 seconds (Warm-up) #> Chain 1:                11.387 seconds (Sampling) #> Chain 1:                47.522 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.00082 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.2 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 33.277 seconds (Warm-up) #> Chain 1:                15.354 seconds (Sampling) #> Chain 1:                48.631 seconds (Total) #> Chain 1:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess P2<-postTraj(model<-fit6,m<-1,ids<-c(1,2,100)) pp1<-plot(P2$p1[[1]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' pp2<-plot(P2$p1[[2]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' pp3<-plot(P2$p1[[3]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' ##    # }"},{"path":"/reference/predJMbayes.html","id":null,"dir":"Reference","previous_headings":"","what":"predJMbayes â€” predJMbayes","title":"predJMbayes â€” predJMbayes","text":"prediction survival probability longitudinal marker using jmBayes2 BIG data","code":""},{"path":"/reference/predJMbayes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"predJMbayes â€” predJMbayes","text":"","code":"predJMbayes(model, ids, process = \"longitudinal\", newdata, ...)"},{"path":"/reference/predJMbayes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"predJMbayes â€” predJMbayes","text":"model fitted model object ids value id process see jm newdata dataset covariate information ids mentioned . ... parameter options, see predict.jm","code":""},{"path":"/reference/predJMbayes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"predJMbayes â€” predJMbayes","text":"list predicted value given id","code":""},{"path":"/reference/predJMbayes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"predJMbayes â€” predJMbayes","text":"","code":"# \\donttest{ ## library(survival) library(nlme) library(dplyr) jmcs1<-jmbayesBig(dtlong=long2, dtsurv = surv2 , longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd= ~ visit|id, timeVar='visit', nchain=1, samplesize=200, id='id') mod3<-jmcs1 ydt<-long2%>%filter(id%in%c(900)) names(ydt) #>  [1] \"id\"     \"x1\"     \"x2\"     \"status\" \"time\"   \"x3\"     \"y\"      \"t1\"     #>  [9] \"visit\"  \"x4\"     \"x5\"     \"x6\"     \"x7\"     cdt<-surv2[,'id']%>%filter(id%in%c(900)) names(cdt) #> [1] \"id\" newdata<-full_join(ydt,cdt,by='id') P2<-predJMbayes(model<-mod3,ids<-c(900),newdata=newdata,process = 'event') pp1<-plot(P2$p1[[1]])  pp1 #> NULL ##     # }"},{"path":"/reference/predJRML.html","id":null,"dir":"Reference","previous_headings":"","what":"predJRML â€” predJRML","title":"predJRML â€” predJRML","text":"prediction survival probability longitudinal marker using joineRML BIG data","code":""},{"path":"/reference/predJRML.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"predJRML â€” predJRML","text":"","code":"predJRML(model, ids, dtlong, dtsurv)"},{"path":"/reference/predJRML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"predJRML â€” predJRML","text":"model fitted model object ids value id dtlong longitudinal data dtsurv survival data","code":""},{"path":"/reference/predJRML.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"predJRML â€” predJRML","text":"list predicted values given id","code":""},{"path":"/reference/predJRML.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"predJRML â€” predJRML","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) jmcs1<-joinRMLBig(dtlong=long2, dtsurv = surv2, longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd=~ visit|id, timeVar='visit', samplesize=200, id='id') #> Error in mjoint(formLongFixed = longm, formLongRandom = rd, formSurv = survm,     data = dtlong1[[i]], survData = dtsurv1[[i]], timeVar = timeVar): could not find function \"mjoint\" mod4<-jmcs1 #> Error in eval(expr, envir, enclos): object 'jmcs1' not found P2<-predJRML(model<-mod4,ids<-c(10),dtlong=long2,dtsurv=surv2) #> Error in eval(expr, envir, enclos): object 'mod4' not found pp1<-plot(P2$plong[[1]]) #> Error in eval(expr, envir, enclos): object 'P2' not found pp1<-plot(P2$psurv[[1]]) #> Error in eval(expr, envir, enclos): object 'P2' not found ##    # }"},{"path":"/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"print â€” print","title":"print â€” print","text":"print","code":""},{"path":"/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print â€” print","text":"","code":"print(object, ...)"},{"path":"/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print â€” print","text":"object object ... others","code":""},{"path":"/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print â€” print","text":"prints table containing various parameter estimates,         SE, P- value survival longitudinal submodel,         model bayesian includes credible interval .","code":""},{"path":"/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print â€” print","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) fit7<-jmstanBig(dtlong=long2,dtsurv = surv2,longm=y~ x7+visit+(1|id), survm=Surv(time,status)~x1+visit,samplesize=200,time_var='visit',id='id') #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000821 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.21 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 33.215 seconds (Warm-up) #> Chain 1:                12.108 seconds (Sampling) #> Chain 1:                45.323 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000869 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.69 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 33.596 seconds (Warm-up) #> Chain 1:                19.991 seconds (Sampling) #> Chain 1:                53.587 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000951 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 9.51 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 40.488 seconds (Warm-up) #> Chain 1:                11.669 seconds (Sampling) #> Chain 1:                52.157 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000882 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.82 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 38.43 seconds (Warm-up) #> Chain 1:                11.554 seconds (Sampling) #> Chain 1:                49.984 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000711 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.11 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 33.673 seconds (Warm-up) #> Chain 1:                16.755 seconds (Sampling) #> Chain 1:                50.428 seconds (Total) #> Chain 1:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess ################################ fit8<-jmcsBig(dtlong=data.frame(long2),dtsurv = data.frame(surv2), longm=y~ x7+visit,survm=Surv(time,status)~x1+visit,rd= ~ visit|id, samplesize=200,id='id') ################################# fit9<-jmbayesBig(dtlong=long2,dtsurv = surv2 , longm=y~ x7+visit,survm=Surv(time,status)~x1+visit, rd= ~ visit|id,timeVar='visit',nchain=1,samplesize=200,id='id') #################################  fit10<-joinRMLBig(dtlong=long2,dtsurv = surv2, longm=y~ x7+visit,survm=Surv(time,status)~x1+visit, rd=~ visit|id,timeVar='visit',samplesize=200,id='id') #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... # }"},{"path":"/reference/print.jmbayesBig.html","id":null,"dir":"Reference","previous_headings":"","what":"print.jmbayesBig â€” print.jmbayesBig","title":"print.jmbayesBig â€” print.jmbayesBig","text":"print.jmbayesBig","code":""},{"path":"/reference/print.jmbayesBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.jmbayesBig â€” print.jmbayesBig","text":"","code":"# S3 method for jmbayesBig print(object, digits = 4, ...)"},{"path":"/reference/print.jmbayesBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.jmbayesBig â€” print.jmbayesBig","text":"object object digits used round numeric values decimal ... others","code":""},{"path":"/reference/print.jmbayesBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.jmbayesBig â€” print.jmbayesBig","text":"prints table containing various parameter estimates,         SE, P- value survival longitudinal submodel,         model bayesian includes credible interval .","code":""},{"path":"/reference/print.jmbayesBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.jmbayesBig â€” print.jmbayesBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr)  ################################# mod3<-jmbayesBig(dtlong=long2, dtsurv = surv2 , longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd= ~ visit|id, timeVar='visit', nchain=1, samplesize=200, id='id') print(mod3) #>  #>  Joint model for Big data using jmbayes2 #>  Call:  #> jmbayesBig(dtlong = long2, dtsurv = surv2, longm = y ~ x7 + visit,  #>     survm = Surv(time, status) ~ x1 + visit, samplesize = 200,  #>     rd = ~visit | id, timeVar = \"visit\", nchain = 1, id = \"id\") #>  #>  #>  Total observation in longitudinal data: 1000  #>  #>  Chunk size: 200  #>  #>  Longitudinal process:  #>               Mean StDev   2.5%  97.5% Pvalue #> (Intercept)  8.848 0.455  7.319  9.123  0.000 #> x7          -0.023 0.007 -0.028 -0.001  0.001 #> visit       -0.093 0.038 -0.149 -0.002  0.014 #> sigma        0.778 0.020  0.740  0.821  0.000 #>  #>  Survival process:  #>          Mean StDev   2.5% 97.5% Pvalue #> x11   -0.054 0.312 -0.748 0.451  0.863 #> visit -0.102 0.064 -0.101 0.158  0.111 #> Mean  -0.148 0.057 -0.229 0.016  0.010 #>  #>  Random effects covariance matrix: #>    D[1, 1]    D[2, 1]    D[2, 2]  #>  1.9874728 -0.3173188  0.1265917     # }"},{"path":"/reference/print.jmcsBig.html","id":null,"dir":"Reference","previous_headings":"","what":"print.jmcsBig â€” print.jmcsBig","title":"print.jmcsBig â€” print.jmcsBig","text":"print.jmcsBig","code":""},{"path":"/reference/print.jmcsBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.jmcsBig â€” print.jmcsBig","text":"","code":"# S3 method for jmcsBig print(object, digits = 3, ...)"},{"path":"/reference/print.jmcsBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.jmcsBig â€” print.jmcsBig","text":"object object digits used round numeric values decimal ... others","code":""},{"path":"/reference/print.jmcsBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.jmcsBig â€” print.jmcsBig","text":"prints table containing various parameter estimates,         SE, P- value survival longitudinal submodel,         model bayesian includes credible interval .","code":""},{"path":"/reference/print.jmcsBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.jmcsBig â€” print.jmcsBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) ################################ mod2<-jmcsBig(dtlong=data.frame(long2), dtsurv = data.frame(surv2), longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd= ~ visit|id, samplesize=200,id='id') print(mod2) #>  #>  Joint model for Big data using FastJM #>  Call:  #> jmcsBig(dtlong = data.frame(long2), dtsurv = data.frame(surv2),  #>     longm = y ~ x7 + visit, survm = Surv(time, status) ~ x1 +  #>         visit, samplesize = 200, rd = ~visit | id, id = \"id\") #>  #>  #>  Total observation in longitudinal data: 1000  #>  #>  Chunk size: 200  #>  #>  Longitudinal process:  #>             Estimate    SE Zvalue Pvalue #> (Intercept)    9.130 0.483 18.896  0.000 #> x7            -0.028 0.008 -3.571  0.000 #> visit         -0.085 0.054 -1.592  0.111 #> sigma^2        0.596 0.012 48.186  0.000 #>  #>  Survival process:  #>          Estimate    SE ZValue Pvalue #> x11_1     -0.032 0.257 -0.123  0.902 #> visit_1   -0.145 0.097 -1.497  0.134 #>  #>  Association parameters : #>               Estimate    SE Zvalue Pvalue #> (Intercept)_1    0.219 0.144  1.522  0.128 #> visit_1          0.272 0.844  0.322  0.748 #>  #>  Variance Covariance matrix of Random effects: #>           Intercept  visit #> Intercept     2.141 -0.376 #> visit        -0.376  0.141    # }"},{"path":"/reference/print.jmstanBig.html","id":null,"dir":"Reference","previous_headings":"","what":"print.jmstanBig â€” print.jmstanBig","title":"print.jmstanBig â€” print.jmstanBig","text":"print.jmstanBig","code":""},{"path":"/reference/print.jmstanBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.jmstanBig â€” print.jmstanBig","text":"","code":"# S3 method for jmstanBig print(object, digits = 3, ...)"},{"path":"/reference/print.jmstanBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.jmstanBig â€” print.jmstanBig","text":"object object digits used round numeric values decimal ... others","code":""},{"path":"/reference/print.jmstanBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.jmstanBig â€” print.jmstanBig","text":"prints table containing various parameter estimates,         SE, P- value survival longitudinal submodel,         model bayesian includes credible interval .","code":""},{"path":"/reference/print.jmstanBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.jmstanBig â€” print.jmstanBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) mod1<-jmstanBig(dtlong=long2,          dtsurv = surv2,          longm=y~ x7+visit+(1|id),          survm=Surv(time,status)~x1+visit,          samplesize=200,          time_var='visit',id='id') #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000941 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 9.41 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 34.053 seconds (Warm-up) #> Chain 1:                12.001 seconds (Sampling) #> Chain 1:                46.054 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000792 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.92 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 37.516 seconds (Warm-up) #> Chain 1:                20.893 seconds (Sampling) #> Chain 1:                58.409 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000728 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.28 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 43.059 seconds (Warm-up) #> Chain 1:                12.256 seconds (Sampling) #> Chain 1:                55.315 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000871 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.71 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 37.062 seconds (Warm-up) #> Chain 1:                11.728 seconds (Sampling) #> Chain 1:                48.79 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000739 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.39 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 32.961 seconds (Warm-up) #> Chain 1:                16.298 seconds (Sampling) #> Chain 1:                49.259 seconds (Total) #> Chain 1:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess print(mod1) #>  #>  Joint model for Big data using rstanarm #>  Call:  #> jmstanBig(dtlong = long2, dtsurv = surv2, longm = y ~ x7 + visit +  #>     (1 | id), survm = Surv(time, status) ~ x1 + visit, samplesize = 200,  #>     time_var = \"visit\", id = \"id\") #>  #>  #>  Total observation in longitudinal data: 1000  #>  #>  Chunk size: 200  #>  #>  Longitudinal process:  #>               Mean StDev   2.5%  97.5%  Zvalue Pvalue #> (Intercept)  8.863 0.440  7.965  9.699  20.155  0.000 #> x7          -0.023 0.007 -0.036 -0.009  -3.443  0.001 #> visit       -0.081 0.024 -0.127 -0.033  -3.409  0.001 #> sigma        0.973 0.023  0.930  1.020  42.632  0.000 #> mean_PPD     7.249 0.041  7.167  7.331 175.646  0.000 #>  #>  Survival process:  #>                         Mean StDev    2.5%  97.5% Zvalue Pvalue #> (Intercept)          -1.667 1.048  -3.672  0.502 -1.591  0.112 #> x11                   0.031 0.250  -0.458  0.502  0.125  0.901 #> visit                -0.134 0.089  -0.303  0.046 -1.509  0.131 #> b-splines-coef1      -2.904 1.436  -6.197 -0.539 -2.021  0.043 #> b-splines-coef2      -0.461 0.912  -2.277  1.353 -0.506  0.613 #> b-splines-coef3       0.486 0.666  -0.785  1.796  0.730  0.466 #> b-splines-coef4      -0.529 1.013  -2.581  1.434 -0.522  0.602 #> b-splines-coef5       2.411 1.701  -0.919  5.697  1.418  0.156 #> b-splines-coef6      -4.647 3.222 -11.868  0.768 -1.442  0.149 #> Assoc|Long1|etavalue -0.191 0.147  -0.489  0.079 -1.302  0.193 #> Random effects covariance matrix: #>  Groups Name              Std.Dev. #>  id     Long1|(Intercept) 1.1298   # }"},{"path":"/reference/print.joinRMLBig.html","id":null,"dir":"Reference","previous_headings":"","what":"print.joinRMLBig â€” print.joinRMLBig","title":"print.joinRMLBig â€” print.joinRMLBig","text":"print.joinRMLBig","code":""},{"path":"/reference/print.joinRMLBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.joinRMLBig â€” print.joinRMLBig","text":"","code":"# S3 method for joinRMLBig print(object, digits = 4, ...)"},{"path":"/reference/print.joinRMLBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.joinRMLBig â€” print.joinRMLBig","text":"object object digits used round numeric values decimal ... others","code":""},{"path":"/reference/print.joinRMLBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.joinRMLBig â€” print.joinRMLBig","text":"prints table containing various parameter estimates,         SE, P- value survival longitudinal submodel,         model bayesian includes credible interval .","code":""},{"path":"/reference/print.joinRMLBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.joinRMLBig â€” print.joinRMLBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) mod4<-joinRMLBig(dtlong=long2, dtsurv = surv2, longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd=~ visit|id, timeVar='visit', samplesize=200, id='id') #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... print(mod4) #>  #>  Joint model for Big data using joineRML #>  Call:  #> joinRMLBig(dtlong = long2, dtsurv = surv2, longm = y ~ x7 + visit,  #>     survm = Surv(time, status) ~ x1 + visit, samplesize = 200,  #>     rd = ~visit | id, timeVar = \"visit\", id = \"id\") #>  #>  #>  Total observation in longitudinal data: 1000  #>  #>  Chunk size: 200  #>  #>  Longitudinal process:  #>               Estimate    SE   Zvalue Pvalue #> (Intercept)_1    8.771 0.175   50.130      0 #> x7_1            -0.022 0.000 -536.692      0 #> visit_1         -0.085 0.002  -35.703      0 #> sigma2_1         0.599 0.000 3174.213      0 #>  #>  Survival process:  #>          Estimate    SE  ZValue Pvalue #> x11       -0.012 0.060  -0.205  0.837 #> visit     -0.140 0.007 -20.201  0.000 #> gamma_1   -0.011 0.005  -2.126  0.034 #>  #>  Variance Covariance matrix of Random effects: #>           Intercept  visit #> Intercept     1.975 -0.352 #> visit        -0.352  0.132    # }"},{"path":"/reference/surv2.html","id":null,"dir":"Reference","previous_headings":"","what":"survival data â€” surv2","title":"survival data â€” surv2","text":"survival dataset related long2 dataset, different numeric categorical covariate","code":""},{"path":"/reference/surv2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survival data â€” surv2","text":"","code":"data(surv2)"},{"path":"/reference/surv2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"survival data â€” surv2","text":"tibble 13 columns 1000 observations, id id value subjects status survival status time survival time visit visit time longitudinal measurements x1,x2,...,x7 different numeric categorical variable","code":""},{"path":"/reference/survfitJMCS.html","id":null,"dir":"Reference","previous_headings":"","what":"survfitJMCS â€” survfitJMCS","title":"survfitJMCS â€” survfitJMCS","text":"prediction survival probability longitudinal marker using FastJM BIG data","code":""},{"path":"/reference/survfitJMCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survfitJMCS â€” survfitJMCS","text":"","code":"survfitJMCS(model, ids, estimator, conf.int = TRUE, include.y = FALSE)"},{"path":"/reference/survfitJMCS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survfitJMCS â€” survfitJMCS","text":"model fitted model object ids value id estimator see survfitjmcs conf.int see survfitjmcs include.y see survfitjmcs","code":""},{"path":"/reference/survfitJMCS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survfitJMCS â€” survfitJMCS","text":"list predicted value given id","code":""},{"path":"/reference/survfitJMCS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survfitJMCS â€” survfitJMCS","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) jmcs1<-jmcsBig(dtlong=data.frame(long2), dtsurv = data.frame(surv2), longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd= ~ visit|id, samplesize=200,id='id') mod2<-jmcs1 P2<-survfitJMCS(model<-mod2,ids<-c(400),estimator = 'median') #> Error in survfitJMCS(model <- mod2, ids <- c(400), estimator = \"median\"): unused argument (estimator = \"median\") pp1<-plot(P2$p1[[1]],estimator=\"both\",include.y = TRUE) #> Error in eval(expr, envir, enclos): object 'P2' not found pp1 #> Error in eval(expr, envir, enclos): object 'pp1' not found ##   # }"}]
