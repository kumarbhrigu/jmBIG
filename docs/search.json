[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Atanu Bhattacharjee. Author, maintainer, contributor. Bhrigu Kumar Rajbongshi. Author, contributor. Gajendra K Vishwakarma. Author, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bhattacharjee , Rajbongshi B, Vishwakarma G (2023). jmBIG: Joint Longitudinal Survival Model Big Data. R package version 0.1.1, https://CRAN.R-project.org/package=jmBIG.","code":"@Manual{,   title = {jmBIG: Joint Longitudinal and Survival Model for Big Data},   author = {Atanu Bhattacharjee and Bhrigu Kumar Rajbongshi and Gajendra K Vishwakarma},   year = {2023},   note = {R package version 0.1.1},   url = {https://CRAN.R-project.org/package=jmBIG}, }"},{"path":"/index.html","id":"jmbig-joint-longitudinal-and-survival-models-for-big-data","dir":"","previous_headings":"","what":"MIIPW","title":"MIIPW","text":"jmBIG R package provides flexible, modular framework joint modeling longitudinal time--event data, specifically optimized large datasets commonly found real-world clinical biomedical studies.","code":""},{"path":"/index.html","id":"id_-features","dir":"","previous_headings":"","what":"âœ¨ Features","title":"MIIPW","text":"ðŸ§  Joint modeling longitudinal biomarkers survival outcomes âš¡ Big data readiness: designed efficiency large sample sizes JMbayes2 (Bayesian joint modeling) FastJM (Frequentist joint modeling) rstanarm (Bayesian GLMMs) joineRML (MLE-based methods) Individual survival probabilities Longitudinal trajectories Dynamic predictions Bootstrapped confidence intervals Visual summaries","code":""},{"path":[]},{"path":"/index.html","id":"from-github-development-version","dir":"","previous_headings":"ðŸ“¦ Installation","what":"From GitHub (development version)","title":"MIIPW","text":"","code":"# If not already installed install.packages(\"remotes\")  # Install jmBIG from GitHub remotes::install_github(\"kumarbhrigu/jmBIG\")"},{"path":"/reference/cisurvfitJMCS.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapped CI using FastJM â€” cisurvfitJMCS","title":"Bootstrapped CI using FastJM â€” cisurvfitJMCS","text":"Bootstrapped CI predicted survival probability","code":""},{"path":"/reference/cisurvfitJMCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapped CI using FastJM â€” cisurvfitJMCS","text":"","code":"cisurvfitJMCS(object)"},{"path":"/reference/cisurvfitJMCS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapped CI using FastJM â€” cisurvfitJMCS","text":"object survfitJMCS object","code":""},{"path":"/reference/cisurvfitJMCS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapped CI using FastJM â€” cisurvfitJMCS","text":"Bootstrap CI survival probability relevant information predicted survival plot","code":""},{"path":"/reference/cisurvfitJMCS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapped CI using FastJM â€” cisurvfitJMCS","text":"","code":"# \\donttest{ ## library(survival) #> Warning: package 'survival' was built under R version 4.3.3 library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union jmcs1<-jmcsBig(dtlong=data.frame(long2), dtsurv = data.frame(surv2), longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd= ~ visit|id, samplesize=200,id='id') mod2<-jmcs1 P2<-survfitJMCS(model<-mod2,ids<-c(5),u<-seq(surv2[surv2$id==5,]$time, surv2[surv2$id==5,]$time+10,0.2),obs.time='time') bootci<-cisurvfitJMCS(P2) print(bootci) #>  #>  Predicted survival proability data #>        Times        LL       Med        UL #> 1   2.351878 1.0000000 1.0000000 1.0000000 #> 2   2.551878 0.9882157 0.9936621 1.0000000 #> 3   2.751878 0.9743832 0.9896088 0.9988270 #> 4   2.951878 0.9679743 0.9831477 0.9982269 #> 5   3.151878 0.9597492 0.9820571 0.9915386 #> 6   3.351878 0.9502830 0.9816114 0.9915386 #> 7   3.551878 0.9383326 0.9754304 0.9894134 #> 8   3.751878 0.9383326 0.9744906 0.9894134 #> 9   3.951878 0.9163845 0.9584968 0.9867460 #> 10  4.151878 0.9144916 0.9492577 0.9867460 #> 11  4.351878 0.9019256 0.9459809 0.9769904 #> 12  4.551878 0.8903315 0.9379571 0.9736214 #> 13  4.751878 0.8734849 0.9333069 0.9657754 #> 14  4.951878 0.8520834 0.9228264 0.9533681 #> 15  5.151878 0.8520834 0.9228264 0.9492620 #> 16  5.351878 0.8390992 0.9075731 0.9470251 #> 17  5.551878 0.8390992 0.8965544 0.9424155 #> 18  5.751878 0.8346794 0.8930066 0.9345108 #> 19  5.951878 0.8087215 0.8724983 0.9231169 #> 20  6.151878 0.7896375 0.8583634 0.9094319 #> 21  6.351878 0.7743486 0.8579572 0.9047730 #> 22  6.551878 0.7613223 0.8443480 0.9019735 #> 23  6.751878 0.7593086 0.8221628 0.8863317 #> 24  6.951878 0.7479515 0.8146577 0.8863317 #> 25  7.151878 0.7323177 0.8109213 0.8838719 #> 26  7.351878 0.7323177 0.8109213 0.8827124 #> 27  7.551878 0.7215099 0.7987750 0.8812711 #> 28  7.751878 0.7103620 0.7945143 0.8783955 #> 29  7.951878 0.6993335 0.7880355 0.8783955 #> 30  8.151878 0.6971499 0.7847947 0.8602679 #> 31  8.351878 0.6971499 0.7776118 0.8588124 #> 32  8.551878 0.6971499 0.7695602 0.8531060 #> 33  8.751878 0.6971499 0.7588306 0.8500690 #> 34  8.951878 0.6967911 0.7475618 0.8485322 #> 35  9.151878 0.6570295 0.7475618 0.8469767 #> 36  9.351878 0.6257875 0.7254336 0.8422764 #> 37  9.551878 0.5996068 0.6995193 0.8345402 #> 38  9.751878 0.5849632 0.6892104 0.8345402 #> 39  9.951878 0.5529481 0.6781402 0.8216601 #> 40 10.151878 0.5412047 0.6720234 0.8149544 #> 41 10.351878 0.5383874 0.6671475 0.8080734 #> 42 10.551878 0.5262847 0.6447058 0.8080734 #> 43 10.751878 0.5116144 0.6447058 0.7955063 #> 44 10.951878 0.5115575 0.6447058 0.7955063 #> 45 11.151878 0.4734098 0.6214168 0.7812288 #> 46 11.351878 0.4704322 0.6145357 0.7812288 #> 47 11.551878 0.4704322 0.6100594 0.7590442 #> 48 11.751878 0.4404278 0.6100594 0.7492311 #> 49 11.951878 0.4404278 0.6100594 0.7492311 #> 50 12.151878 0.4346091 0.5961206 0.7492311 #> 51 12.351878 0.4152544 0.5864073 0.7442066 ##   # }"},{"path":"/reference/jmbayesBig.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"function joint model BIG DATA using JMbayes2","code":""},{"path":"/reference/jmbayesBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"","code":"jmbayesBig(   dtlong,   dtsurv,   longm,   survm,   samplesize = 50,   rd,   timeVar,   nchain = 1,   id,   niter = 2000,   nburnin = 1000 )"},{"path":"/reference/jmbayesBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"dtlong longitudinal dataset, contains id,visit time,longitudinal measurements along various covariates dtsurv survival dataset corresponding longitudinal dataset, survival status survival time longm fixed effect model longitudinal response survm survival model samplesize sample size divide Big data rd random effect model part timeVar time variable longitudinal model, included longitudinal data nchain number chain MCMC id name id column longitudinal dataset niter number iteration MCMC chain nburnin number burnin sample MCMC chain","code":""},{"path":"/reference/jmbayesBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"returns list containing various output useful prediction.","code":""},{"path":"/reference/jmbayesBig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"Rizopoulos, D., G. Papageorgiou, P. Miranda Afonso. \"JMbayes2: extended joint models longitudinal time--event data.\" R package version 0.2-4 (2022).","code":""},{"path":[]},{"path":"/reference/jmbayesBig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"Atanu Bhattacharjee, Bhrigu Kumar Rajbongshi Gajendra Kumar Vishwakarma","code":""},{"path":"/reference/jmbayesBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint model for BIG data using JMbayes2 â€” jmbayesBig","text":"","code":"# \\donttest{ ## library(survival) library(nlme) #>  #> Attaching package: 'nlme' #> The following object is masked from 'package:dplyr': #>  #>     collapse library(dplyr) fit5<-jmbayesBig(dtlong=long2,dtsurv = surv2,longm=y~ x7+visit,survm=Surv(time,status)~x1+visit, rd= ~ visit|id,timeVar='visit',nchain=1,samplesize=200,id='id') ydt<-long2%>%filter(id%in%c(900)) cdt<-surv2[,'id']%>%filter(id%in%c(900)) newdata<-full_join(ydt,cdt,by='id') P2<-predJMbayes(model<-fit5,ids<-c(900),newdata=newdata,process = 'event') plot(P2$p1[[1]])  ## # }"},{"path":"/reference/jmcsBig.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint model for BIG data using FastJM â€” jmcsBig","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"function joint model BIG DATA using FastJM","code":""},{"path":"/reference/jmcsBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"","code":"jmcsBig(dtlong, dtsurv, longm, survm, samplesize = 50, rd, id)"},{"path":"/reference/jmcsBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"dtlong longitudinal dataset, contains id,visit time,longitudinal measurements along various covariates dtsurv survival dataset corresponding longitudinal dataset, survival status survival time longm model longitudinal response survm survival model samplesize sample size divide Big data rd random effect part id name id column longitudinal dataset","code":""},{"path":"/reference/jmcsBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"returns list containing various output useful prediction.","code":""},{"path":"/reference/jmcsBig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"Li, Shanpeng, et al. \"Efficient Algorithms Implementation Semiparametric Joint Model Longitudinal Competing Risk Data: Applications Massive Biobank Data.\" Computational Mathematical Methods Medicine 2022 (2022).","code":""},{"path":[]},{"path":"/reference/jmcsBig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"Atanu Bhattacharjee, Bhrigu Kumar Rajbongshi Gajendra Kumar Vishwakarma","code":""},{"path":"/reference/jmcsBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint model for BIG data using FastJM â€” jmcsBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) fit2<-jmcsBig(dtlong=data.frame(long2),dtsurv = data.frame(surv2), longm=y~ x7+visit,survm=Surv(time,status)~x1+visit,rd= ~ visit|id,samplesize=200,id='id') print(fit2) #>  #>  Joint model for Big data using FastJM #>  Call:  #> jmcsBig(dtlong = data.frame(long2), dtsurv = data.frame(surv2),  #>     longm = y ~ x7 + visit, survm = Surv(time, status) ~ x1 +  #>         visit, samplesize = 200, rd = ~visit | id, id = \"id\") #>  #>  #>  Total observation in longitudinal data: 1000  #>  #>  Chunk size: 200  #>  #>  Longitudinal process:  #>             Estimate    SE Zvalue Pvalue #> (Intercept)    9.130 0.483 18.896  0.000 #> x7            -0.028 0.008 -3.571  0.000 #> visit         -0.085 0.054 -1.592  0.111 #> sigma^2        0.596 0.012 48.186  0.000 #>  #>  Survival process:  #>          Estimate    SE ZValue Pvalue #> x11_1     -0.032 0.257 -0.123  0.902 #> visit_1   -0.145 0.097 -1.497  0.134 #>  #>  Association parameters : #>               Estimate    SE Zvalue Pvalue #> (Intercept)_1    0.219 0.144  1.522  0.128 #> visit_1          0.272 0.844  0.322  0.748 #>  #>  Variance Covariance matrix of Random effects: #>           Intercept  visit #> Intercept     2.141 -0.376 #> visit        -0.376  0.141 ##   # }"},{"path":"/reference/jmstanBig.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint model for BIG data using rstanarm â€” jmstanBig","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"function joint model BIG DATA using rstanarm package","code":""},{"path":"/reference/jmstanBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"","code":"jmstanBig(   dtlong,   dtsurv,   longm,   survm,   samplesize = 50,   time_var,   id,   nchain = 1,   refresh = 2000 )"},{"path":"/reference/jmstanBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"dtlong longitudinal dataset, contains id,visit time,longitudinal measurements along various covariates dtsurv survival dataset corresponding longitudinal dataset, survival status survival time longm model longitudinal response survm survival model samplesize sample size divide Big data time_var time variable longitudinal model, included longitudinal data id name id column longitudinal dataset nchain number chain MCMC refresh refresh rate MCMC chain","code":""},{"path":"/reference/jmstanBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"returns list containing various output useful prediction.","code":""},{"path":"/reference/jmstanBig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"Goodrich, B., et al. \"rstanarm: Bayesian applied regression modeling via Stan. R package version 2.17. 4.\" Online< http://mc-stan. org (2018).","code":""},{"path":[]},{"path":"/reference/jmstanBig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"Atanu Bhattacharjee, Bhrigu Kumar Rajbongshi Gajendra Kumar Vishwakarma","code":""},{"path":"/reference/jmstanBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint model for BIG data using rstanarm â€” jmstanBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) fit3<-jmstanBig(dtlong=long2,dtsurv = surv2,longm=y~ x7+visit+(1|id), survm=Surv(time,status)~x1+visit,samplesize=200,time_var='visit',id='id') #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.003453 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 34.53 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 31.564 seconds (Warm-up) #> Chain 1:                12.376 seconds (Sampling) #> Chain 1:                43.94 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.001135 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 11.35 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 34.623 seconds (Warm-up) #> Chain 1:                20.453 seconds (Sampling) #> Chain 1:                55.076 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000708 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.08 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 43.552 seconds (Warm-up) #> Chain 1:                12.429 seconds (Sampling) #> Chain 1:                55.981 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000829 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.29 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 38.4 seconds (Warm-up) #> Chain 1:                12.474 seconds (Sampling) #> Chain 1:                50.874 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.001276 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 12.76 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 33.632 seconds (Warm-up) #> Chain 1:                16.025 seconds (Sampling) #> Chain 1:                49.657 seconds (Total) #> Chain 1:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess P2<-postTraj(model<-fit3,m<-1,ids<-c(1,2,100)) pp1<-plot(P2$p1[[1]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' pp2<-plot(P2$p1[[2]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' pp3<-plot(P2$p1[[3]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' ## # }"},{"path":"/reference/joinRMLBig.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint model for BIG data using joineRML â€” joinRMLBig","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"function joint model BIG DATA using joineRML","code":""},{"path":"/reference/joinRMLBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"","code":"joinRMLBig(dtlong, dtsurv, longm, survm, samplesize = 50, rd, timeVar, id)"},{"path":"/reference/joinRMLBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"dtlong longitudinal dataset, contains id,visit time,longitudinal measurements along various covariates dtsurv survival dataset corresponding longitudinal dataset, survival status survival time longm model longitudinal response survm survival model samplesize random effect part rd random effect part timeVar time variable longitudinal model, included longitudinal data id name id column longitudinal dataset","code":""},{"path":"/reference/joinRMLBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"returns list containing various output useful prediction.","code":""},{"path":"/reference/joinRMLBig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"Hickey, Graeme L., et al. \"joineRML: joint model software package time--event multivariate longitudinal outcomes.\" BMC medical research methodology 18 (2018): 1-14.","code":""},{"path":[]},{"path":"/reference/joinRMLBig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"Atanu Bhattacharjee, Bhrigu Kumar Rajbongshi Gajendra Kumar Vishwakarma","code":""},{"path":"/reference/joinRMLBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint model for BIG data using joineRML â€” joinRMLBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) fit4<-joinRMLBig(dtlong=long2,dtsurv = surv2,longm=y~ x7+visit,survm=Surv(time,status)~x1+visit, rd=~ visit|id,timeVar='visit',samplesize=200,id='id') #> Error in mjoint(formLongFixed = longm, formLongRandom = rd, formSurv = survm,     data = dtlong1[[i]], survData = dtsurv1[[i]], timeVar = timeVar): could not find function \"mjoint\" P2<-predJRML(model<-fit4,ids<-c(10),dtlong=long2,dtsurv=surv2) #> Error in eval(expr, envir, enclos): object 'fit4' not found pp1<-plot(P2$plong[[1]]) #> Error in eval(expr, envir, enclos): object 'P2' not found pp1<-plot(P2$psurv[[1]]) #> Error in eval(expr, envir, enclos): object 'P2' not found ##    # }"},{"path":"/reference/long2.html","id":null,"dir":"Reference","previous_headings":"","what":"longitudinal data â€” long2","title":"longitudinal data â€” long2","text":"longitudinal dataset single marker , different numeric categorical covariate","code":""},{"path":"/reference/long2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"longitudinal data â€” long2","text":"","code":"data(long2)"},{"path":"/reference/long2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"longitudinal data â€” long2","text":"tibble 13 columns 5639 observations, id id value subjects status survival status time survival time y longitudinal marker visit visit time longitudinal measurements x1,x2,...,x7 different numeric categorical variable","code":""},{"path":"/reference/longsurv.html","id":null,"dir":"Reference","previous_headings":"","what":"longitudinal- survival dataset â€” longsurv","title":"longitudinal- survival dataset â€” longsurv","text":"longitudinal dataset single marker , different numeric categorical covariate","code":""},{"path":"/reference/longsurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"longitudinal- survival dataset â€” longsurv","text":"","code":"data(longsurv)"},{"path":"/reference/longsurv.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"longitudinal- survival dataset â€” longsurv","text":"tibble 13 columns 5639 observations, id id value subjects status survival status time survival time y longitudinal marker visit visit time longitudinal measurements x1,x2,...,x7 different numeric categorical variable","code":""},{"path":"/reference/plot_cisurvfitJMCS.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot for cisurvfitJMCS object â€” plot_cisurvfitJMCS","title":"Plot for cisurvfitJMCS object â€” plot_cisurvfitJMCS","text":"prediction survival probability longitudinal marker using FastJM BIG data","code":""},{"path":"/reference/plot_cisurvfitJMCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot for cisurvfitJMCS object â€” plot_cisurvfitJMCS","text":"","code":"plot_cisurvfitJMCS(object)"},{"path":"/reference/plot_cisurvfitJMCS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot for cisurvfitJMCS object â€” plot_cisurvfitJMCS","text":"object fitted survfitJMCS object","code":""},{"path":"/reference/plot_cisurvfitJMCS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot for cisurvfitJMCS object â€” plot_cisurvfitJMCS","text":"Plot predicted survival probability","code":""},{"path":"/reference/plot_cisurvfitJMCS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot for cisurvfitJMCS object â€” plot_cisurvfitJMCS","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) jmcs1<-jmcsBig(dtlong=data.frame(long2), dtsurv = data.frame(surv2), longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd= ~ visit|id, samplesize=200,id='id') mod2<-jmcs1 P2<-survfitJMCS(model<-mod2,ids<-c(5),u<-seq(surv2[surv2$id==5,]$time, surv2[surv2$id==5,]$time+10,0.2),obs.time='time') P3<-cisurvfitJMCS(P2) #> Error in (1 - h) * qs[i]: non-numeric argument to binary operator plot_cisurvfitJMCS(P3) #> Error in eval(expr, envir, enclos): object 'P3' not found ##   # }"},{"path":"/reference/postSurvfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction using rstanarm â€” postSurvfit","title":"Prediction using rstanarm â€” postSurvfit","text":"posterior survival probability estimates rstanarm BIG data","code":""},{"path":"/reference/postSurvfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction using rstanarm â€” postSurvfit","text":"","code":"postSurvfit(model, ids, ...)"},{"path":"/reference/postSurvfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction using rstanarm â€” postSurvfit","text":"model fitted model ids value id ... parameter option, see posterior_survfit","code":""},{"path":"/reference/postSurvfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction using rstanarm â€” postSurvfit","text":"list predicted value given id","code":""},{"path":"/reference/postSurvfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction using rstanarm â€” postSurvfit","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) jmstan<-jmstanBig(dtlong=long2,          dtsurv = surv2,          longm=y~ x7+visit+(1|id),          survm=Surv(time,status)~x1+visit,          samplesize=200,          time_var='visit',id='id') #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.00084 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.4 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 33.025 seconds (Warm-up) #> Chain 1:                12.147 seconds (Sampling) #> Chain 1:                45.172 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.001033 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 10.33 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 34.428 seconds (Warm-up) #> Chain 1:                22.882 seconds (Sampling) #> Chain 1:                57.31 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000795 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.95 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 45.89 seconds (Warm-up) #> Chain 1:                13.692 seconds (Sampling) #> Chain 1:                59.582 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000943 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 9.43 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 40.295 seconds (Warm-up) #> Chain 1:                12.659 seconds (Sampling) #> Chain 1:                52.954 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000843 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.43 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 36.032 seconds (Warm-up) #> Chain 1:                17.002 seconds (Sampling) #> Chain 1:                53.034 seconds (Total) #> Chain 1:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess mod1<-jmstan P2<-postSurvfit(model<-mod1,ids<-c(1,2,210)) pp1<-plot(P2$p1[[1]]) pp1  pp2<-plot(P2$p1[[2]]) pp2  pp3<-plot(P2$p1[[3]]) pp3   ##    # }"},{"path":"/reference/postTraj.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction using rstanarm â€” postTraj","title":"Prediction using rstanarm â€” postTraj","text":"prediction posterior trajectory longitudinal marker using rstanarm Big data","code":""},{"path":"/reference/postTraj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction using rstanarm â€” postTraj","text":"","code":"postTraj(model, m, ids, ...)"},{"path":"/reference/postTraj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction using rstanarm â€” postTraj","text":"model fitted model object m m posterior_traj function ids value id ... parameter option, see posterior_traj","code":""},{"path":"/reference/postTraj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction using rstanarm â€” postTraj","text":"list predicted values given id","code":""},{"path":"/reference/postTraj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction using rstanarm â€” postTraj","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) fit6<-jmstanBig(dtlong=long2,dtsurv = surv2,longm=y~ x7+visit+(1|id),          survm=Surv(time,status)~x1+visit,samplesize=200,time_var='visit',id='id') #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.001029 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 10.29 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 36.444 seconds (Warm-up) #> Chain 1:                12.704 seconds (Sampling) #> Chain 1:                49.148 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000788 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.88 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 37.351 seconds (Warm-up) #> Chain 1:                21.636 seconds (Sampling) #> Chain 1:                58.987 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.001172 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 11.72 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 46.346 seconds (Warm-up) #> Chain 1:                14.235 seconds (Sampling) #> Chain 1:                60.581 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000729 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.29 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 39.819 seconds (Warm-up) #> Chain 1:                12.569 seconds (Sampling) #> Chain 1:                52.388 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000815 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.15 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 35.136 seconds (Warm-up) #> Chain 1:                16.324 seconds (Sampling) #> Chain 1:                51.46 seconds (Total) #> Chain 1:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess P2<-postTraj(model<-fit6,m<-1,ids<-c(1,2,100)) pp1<-plot(P2$p1[[1]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' pp2<-plot(P2$p1[[2]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' pp3<-plot(P2$p1[[3]],plot_observed = TRUE) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' ##    # }"},{"path":"/reference/predJMbayes.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction using JMbayes2 â€” predJMbayes","title":"Prediction using JMbayes2 â€” predJMbayes","text":"prediction survival probability longitudinal marker using jmBayes2 BIG data","code":""},{"path":"/reference/predJMbayes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction using JMbayes2 â€” predJMbayes","text":"","code":"predJMbayes(model, ids, process = \"longitudinal\", newdata, ...)"},{"path":"/reference/predJMbayes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction using JMbayes2 â€” predJMbayes","text":"model fitted model object ids value id process see jm newdata dataset covariate information ids mentioned . ... parameter options, see predict.jm","code":""},{"path":"/reference/predJMbayes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction using JMbayes2 â€” predJMbayes","text":"list predicted value given id","code":""},{"path":"/reference/predJMbayes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction using JMbayes2 â€” predJMbayes","text":"","code":"# \\donttest{ ## library(survival) library(nlme) library(dplyr) jmcs1<-jmbayesBig(dtlong=long2, dtsurv = surv2 , longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd= ~ visit|id, timeVar='visit', nchain=1, samplesize=200, id='id') mod3<-jmcs1 ydt<-long2%>%filter(id%in%c(900)) names(ydt) #>  [1] \"id\"     \"x1\"     \"x2\"     \"status\" \"time\"   \"x3\"     \"y\"      \"t1\"     #>  [9] \"visit\"  \"x4\"     \"x5\"     \"x6\"     \"x7\"     cdt<-surv2[,'id']%>%filter(id%in%c(900)) names(cdt) #> [1] \"id\" newdata<-full_join(ydt,cdt,by='id') P2<-predJMbayes(model<-mod3,ids<-c(900),newdata=newdata,process = 'event') plot(P2$p1[[1]])   ##     # }"},{"path":"/reference/predJRML.html","id":null,"dir":"Reference","previous_headings":"","what":"predJRML â€” predJRML","title":"predJRML â€” predJRML","text":"prediction survival probability longitudinal marker using joineRML BIG data","code":""},{"path":"/reference/predJRML.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"predJRML â€” predJRML","text":"","code":"predJRML(model, ids, dtlong, dtsurv)"},{"path":"/reference/predJRML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"predJRML â€” predJRML","text":"model fitted model object ids value id dtlong longitudinal data dtsurv survival data","code":""},{"path":"/reference/predJRML.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"predJRML â€” predJRML","text":"list predicted values given id","code":""},{"path":"/reference/predJRML.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"predJRML â€” predJRML","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) jmcs1<-joinRMLBig(dtlong=long2, dtsurv = surv2, longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd=~ visit|id, timeVar='visit', samplesize=200, id='id') #> Error in mjoint(formLongFixed = longm, formLongRandom = rd, formSurv = survm,     data = dtlong1[[i]], survData = dtsurv1[[i]], timeVar = timeVar): could not find function \"mjoint\" mod4<-jmcs1 #> Error in eval(expr, envir, enclos): object 'jmcs1' not found P2<-predJRML(model<-mod4,ids<-c(10),dtlong=long2,dtsurv=surv2) #> Error in eval(expr, envir, enclos): object 'mod4' not found pp1<-plot(P2$plong[[1]]) #> Error in eval(expr, envir, enclos): object 'P2' not found pp1<-plot(P2$psurv[[1]]) #> Error in eval(expr, envir, enclos): object 'P2' not found ##    # }"},{"path":"/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"print â€” print","title":"print â€” print","text":"print","code":""},{"path":"/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print â€” print","text":"","code":"print(object, ...)"},{"path":"/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print â€” print","text":"object object ... others","code":""},{"path":"/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print â€” print","text":"prints table containing various parameter estimates,         SE, P- value survival longitudinal submodel,         model bayesian includes credible interval .","code":""},{"path":"/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print â€” print","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) fit7<-jmstanBig(dtlong=long2,dtsurv = surv2,longm=y~ x7+visit+(1|id), survm=Surv(time,status)~x1+visit,samplesize=200,time_var='visit',id='id') #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000821 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.21 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 33.215 seconds (Warm-up) #> Chain 1:                12.108 seconds (Sampling) #> Chain 1:                45.323 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000869 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.69 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 33.596 seconds (Warm-up) #> Chain 1:                19.991 seconds (Sampling) #> Chain 1:                53.587 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000951 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 9.51 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 40.488 seconds (Warm-up) #> Chain 1:                11.669 seconds (Sampling) #> Chain 1:                52.157 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000882 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.82 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 38.43 seconds (Warm-up) #> Chain 1:                11.554 seconds (Sampling) #> Chain 1:                49.984 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000711 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.11 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 33.673 seconds (Warm-up) #> Chain 1:                16.755 seconds (Sampling) #> Chain 1:                50.428 seconds (Total) #> Chain 1:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess ################################ fit8<-jmcsBig(dtlong=data.frame(long2),dtsurv = data.frame(surv2), longm=y~ x7+visit,survm=Surv(time,status)~x1+visit,rd= ~ visit|id, samplesize=200,id='id') ################################# fit9<-jmbayesBig(dtlong=long2,dtsurv = surv2 , longm=y~ x7+visit,survm=Surv(time,status)~x1+visit, rd= ~ visit|id,timeVar='visit',nchain=1,samplesize=200,id='id') #################################  fit10<-joinRMLBig(dtlong=long2,dtsurv = surv2, longm=y~ x7+visit,survm=Surv(time,status)~x1+visit, rd=~ visit|id,timeVar='visit',samplesize=200,id='id') #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... # }"},{"path":"/reference/print.jmbayesBig.html","id":null,"dir":"Reference","previous_headings":"","what":"print.jmbayesBig â€” print.jmbayesBig","title":"print.jmbayesBig â€” print.jmbayesBig","text":"print method class 'jmbayesBig'","code":""},{"path":"/reference/print.jmbayesBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.jmbayesBig â€” print.jmbayesBig","text":"","code":"# S3 method for jmbayesBig print(x, ...)"},{"path":"/reference/print.jmbayesBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.jmbayesBig â€” print.jmbayesBig","text":"x fitted object ... others","code":""},{"path":"/reference/print.jmbayesBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.jmbayesBig â€” print.jmbayesBig","text":"prints table containing various parameter estimates,         SE, P- value survival longitudinal submodel,         model bayesian includes credible interval .","code":""},{"path":"/reference/print.jmbayesBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.jmbayesBig â€” print.jmbayesBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr)  ################################# mod3<-jmbayesBig(dtlong=long2, dtsurv = surv2 , longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd= ~ visit|id, timeVar='visit', nchain=1, samplesize=200, id='id') print(mod3) #>  #>  Joint model for Big data using jmbayes2 #>  Call:  #> jmbayesBig(dtlong = long2, dtsurv = surv2, longm = y ~ x7 + visit,  #>     survm = Surv(time, status) ~ x1 + visit, samplesize = 200,  #>     rd = ~visit | id, timeVar = \"visit\", nchain = 1, id = \"id\") #>  #>  #>  Total observation in longitudinal data: 1000  #>  #>  Chunk size: 200  #>  #>  Longitudinal process:  #>               Mean StDev   2.5%  97.5% Pvalue #> (Intercept)  8.848 0.455  7.319  9.123  0.000 #> x7          -0.023 0.007 -0.028 -0.001  0.001 #> visit       -0.093 0.038 -0.149 -0.002  0.014 #> sigma        0.778 0.020  0.740  0.821  0.000 #>  #>  Survival process:  #>          Mean StDev   2.5% 97.5% Pvalue #> x11   -0.054 0.312 -0.748 0.451  0.863 #> visit -0.102 0.064 -0.101 0.158  0.111 #> Mean  -0.148 0.057 -0.229 0.016  0.010 #>  #>  Random effects covariance matrix: #>    D[1, 1]    D[2, 1]    D[2, 2]  #>  1.9874728 -0.3173188  0.1265917     # }"},{"path":"/reference/print.jmcsBig.html","id":null,"dir":"Reference","previous_headings":"","what":"print.jmcsBig â€” print.jmcsBig","title":"print.jmcsBig â€” print.jmcsBig","text":"print method class 'jmcsBig'","code":""},{"path":"/reference/print.jmcsBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.jmcsBig â€” print.jmcsBig","text":"","code":"# S3 method for jmcsBig print(x, ...)"},{"path":"/reference/print.jmcsBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.jmcsBig â€” print.jmcsBig","text":"x fitted object ... others","code":""},{"path":"/reference/print.jmcsBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.jmcsBig â€” print.jmcsBig","text":"prints table containing various parameter estimates,         SE, P- value survival longitudinal submodel,         model bayesian includes credible interval .","code":""},{"path":"/reference/print.jmcsBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.jmcsBig â€” print.jmcsBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) ################################ mod2<-jmcsBig(dtlong=data.frame(long2), dtsurv = data.frame(surv2), longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd= ~ visit|id, samplesize=200,id='id') print(mod2) #>  #>  Joint model for Big data using FastJM #>  Call:  #> jmcsBig(dtlong = data.frame(long2), dtsurv = data.frame(surv2),  #>     longm = y ~ x7 + visit, survm = Surv(time, status) ~ x1 +  #>         visit, samplesize = 200, rd = ~visit | id, id = \"id\") #>  #>  #>  Total observation in longitudinal data: 1000  #>  #>  Chunk size: 200  #>  #>  Longitudinal process:  #>             Estimate    SE Zvalue Pvalue #> (Intercept)    9.130 0.483 18.896  0.000 #> x7            -0.028 0.008 -3.571  0.000 #> visit         -0.085 0.054 -1.592  0.111 #> sigma^2        0.596 0.012 48.186  0.000 #>  #>  Survival process:  #>          Estimate    SE ZValue Pvalue #> x11_1     -0.032 0.257 -0.123  0.902 #> visit_1   -0.145 0.097 -1.497  0.134 #>  #>  Association parameters : #>               Estimate    SE Zvalue Pvalue #> (Intercept)_1    0.219 0.144  1.522  0.128 #> visit_1          0.272 0.844  0.322  0.748 #>  #>  Variance Covariance matrix of Random effects: #>           Intercept  visit #> Intercept     2.141 -0.376 #> visit        -0.376  0.141    # }"},{"path":"/reference/print.jmstanBig.html","id":null,"dir":"Reference","previous_headings":"","what":"print.jmstanBig â€” print.jmstanBig","title":"print.jmstanBig â€” print.jmstanBig","text":"print method class 'jmstanBig'","code":""},{"path":"/reference/print.jmstanBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.jmstanBig â€” print.jmstanBig","text":"","code":"# S3 method for jmstanBig print(x, ...)"},{"path":"/reference/print.jmstanBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.jmstanBig â€” print.jmstanBig","text":"x fitted object ... others","code":""},{"path":"/reference/print.jmstanBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.jmstanBig â€” print.jmstanBig","text":"prints table containing various parameter estimates,         SE, P- value survival longitudinal submodel,         model bayesian includes credible interval .","code":""},{"path":"/reference/print.jmstanBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.jmstanBig â€” print.jmstanBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) mod1<-jmstanBig(dtlong=long2,          dtsurv = surv2,          longm=y~ x7+visit+(1|id),          survm=Surv(time,status)~x1+visit,          samplesize=200,          time_var='visit',id='id') #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.00881 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 88.1 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 46.036 seconds (Warm-up) #> Chain 1:                24.14 seconds (Sampling) #> Chain 1:                70.176 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.003599 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 35.99 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 38.053 seconds (Warm-up) #> Chain 1:                27.137 seconds (Sampling) #> Chain 1:                65.19 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.003973 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 39.73 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 60.363 seconds (Warm-up) #> Chain 1:                13.105 seconds (Sampling) #> Chain 1:                73.468 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.003774 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 37.74 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 51.011 seconds (Warm-up) #> Chain 1:                16.763 seconds (Sampling) #> Chain 1:                67.774 seconds (Total) #> Chain 1:  #> Fitting a univariate joint model. #>  #> Please note the warmup may be much slower than later iterations! #>  #> SAMPLING FOR MODEL 'jm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.002787 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 27.87 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 46.349 seconds (Warm-up) #> Chain 1:                23.098 seconds (Sampling) #> Chain 1:                69.447 seconds (Total) #> Chain 1:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess print(mod1) #>  #>  Joint model for Big data using rstanarm #>  Call:  #> jmstanBig(dtlong = long2, dtsurv = surv2, longm = y ~ x7 + visit +  #>     (1 | id), survm = Surv(time, status) ~ x1 + visit, samplesize = 200,  #>     time_var = \"visit\", id = \"id\") #>  #>  #>  Total observation in longitudinal data: 1000  #>  #>  Chunk size: 200  #>  #>  Longitudinal process:  #>               Mean StDev   2.5%  97.5%  Zvalue Pvalue #> (Intercept)  8.863 0.440  7.965  9.699  20.155  0.000 #> x7          -0.023 0.007 -0.036 -0.009  -3.443  0.001 #> visit       -0.081 0.024 -0.127 -0.033  -3.409  0.001 #> sigma        0.973 0.023  0.930  1.020  42.632  0.000 #> mean_PPD     7.249 0.041  7.167  7.331 175.646  0.000 #>  #>  Survival process:  #>                         Mean StDev    2.5%  97.5% Zvalue Pvalue #> (Intercept)          -1.667 1.048  -3.672  0.502 -1.591  0.112 #> x11                   0.031 0.250  -0.458  0.502  0.125  0.901 #> visit                -0.134 0.089  -0.303  0.046 -1.509  0.131 #> b-splines-coef1      -2.904 1.436  -6.197 -0.539 -2.021  0.043 #> b-splines-coef2      -0.461 0.912  -2.277  1.353 -0.506  0.613 #> b-splines-coef3       0.486 0.666  -0.785  1.796  0.730  0.466 #> b-splines-coef4      -0.529 1.013  -2.581  1.434 -0.522  0.602 #> b-splines-coef5       2.411 1.701  -0.919  5.697  1.418  0.156 #> b-splines-coef6      -4.647 3.222 -11.868  0.768 -1.442  0.149 #> Assoc|Long1|etavalue -0.191 0.147  -0.489  0.079 -1.302  0.193 #> Random effects covariance matrix: #>  Groups Name              Std.Dev. #>  id     Long1|(Intercept) 1.1298   # }"},{"path":"/reference/print.joinRMLBig.html","id":null,"dir":"Reference","previous_headings":"","what":"print.joinRMLBig â€” print.joinRMLBig","title":"print.joinRMLBig â€” print.joinRMLBig","text":"print method class 'joinRMLBig'","code":""},{"path":"/reference/print.joinRMLBig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.joinRMLBig â€” print.joinRMLBig","text":"","code":"# S3 method for joinRMLBig print(x, ...)"},{"path":"/reference/print.joinRMLBig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.joinRMLBig â€” print.joinRMLBig","text":"x fitted object ... others","code":""},{"path":"/reference/print.joinRMLBig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.joinRMLBig â€” print.joinRMLBig","text":"prints table containing various parameter estimates,         SE, P- value survival longitudinal submodel,         model bayesian includes credible interval .","code":""},{"path":"/reference/print.joinRMLBig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.joinRMLBig â€” print.joinRMLBig","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) mod4<-joinRMLBig(dtlong=long2, dtsurv = surv2, longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd=~ visit|id, timeVar='visit', samplesize=200, id='id') #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... #> EM algorithm has converged! #> Calculating post model fit statistics... print(mod4) #>  #>  Joint model for Big data using joineRML #>  Call:  #> joinRMLBig(dtlong = long2, dtsurv = surv2, longm = y ~ x7 + visit,  #>     survm = Surv(time, status) ~ x1 + visit, samplesize = 200,  #>     rd = ~visit | id, timeVar = \"visit\", id = \"id\") #>  #>  #>  Total observation in longitudinal data: 1000  #>  #>  Chunk size: 200  #>  #>  Longitudinal process:  #>               Estimate    SE   Zvalue Pvalue #> (Intercept)_1    8.771 0.175   50.130      0 #> x7_1            -0.022 0.000 -536.692      0 #> visit_1         -0.085 0.002  -35.703      0 #> sigma2_1         0.599 0.000 3174.213      0 #>  #>  Survival process:  #>          Estimate    SE  ZValue Pvalue #> x11       -0.012 0.060  -0.205  0.837 #> visit     -0.140 0.007 -20.201  0.000 #> gamma_1   -0.011 0.005  -2.126  0.034 #>  #>  Variance Covariance matrix of Random effects: #>           Intercept  visit #> Intercept     1.975 -0.352 #> visit        -0.352  0.132    # }"},{"path":"/reference/surv2.html","id":null,"dir":"Reference","previous_headings":"","what":"survival data â€” surv2","title":"survival data â€” surv2","text":"survival dataset related long2 dataset, different numeric categorical covariate","code":""},{"path":"/reference/surv2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survival data â€” surv2","text":"","code":"data(surv2)"},{"path":"/reference/surv2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"survival data â€” surv2","text":"tibble 13 columns 1000 observations, id id value subjects status survival status time survival time visit visit time longitudinal measurements x1,x2,...,x7 different numeric categorical variable","code":""},{"path":"/reference/survfitJMCS.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction using FastJM â€” survfitJMCS","title":"Prediction using FastJM â€” survfitJMCS","text":"prediction survival probability using FastJM BIG data","code":""},{"path":"/reference/survfitJMCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction using FastJM â€” survfitJMCS","text":"","code":"survfitJMCS(model, ids, u, method = \"GH\", obs.time)"},{"path":"/reference/survfitJMCS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction using FastJM â€” survfitJMCS","text":"model fitted model object ids value id u see survfitjmcs method options 'Laplace','GH' obs.time vector represents time variable longitudinal data","code":""},{"path":"/reference/survfitJMCS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction using FastJM â€” survfitJMCS","text":"list predicted value given id along information relevant survival probability confidence plot","code":""},{"path":"/reference/survfitJMCS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction using FastJM â€” survfitJMCS","text":"","code":"# \\donttest{ ## library(survival) library(dplyr) jmcs1<-jmcsBig(dtlong=data.frame(long2), dtsurv = data.frame(surv2), longm=y~ x7+visit, survm=Surv(time,status)~x1+visit, rd= ~ visit|id, samplesize=200,id='id') mod2<-jmcs1 P2<-survfitJMCS(model<-mod2,ids<-c(5),u<-seq(surv2[surv2$id==5,]$time, surv2[surv2$id==5,]$time+10,0.2),obs.time='time') print(P2) #>  #> Prediction of Conditional Probabilities of Event #> based on the pseudo-adaptive Guass-Hermite quadrature rule with 6 quadrature points #> $`5` #>        times  PredSurv #> 1   2.351878 1.0000000 #> 2   2.351878 1.0000000 #> 3   2.551878 0.9893133 #> 4   2.751878 0.9573583 #> 5   2.951878 0.9573583 #> 6   3.151878 0.9573583 #> 7   3.351878 0.9573583 #> 8   3.551878 0.9573583 #> 9   3.751878 0.9573583 #> 10  3.951878 0.9464924 #> 11  4.151878 0.9356432 #> 12  4.351878 0.9356432 #> 13  4.551878 0.9139051 #> 14  4.751878 0.8809480 #> 15  4.951878 0.8809480 #> 16  5.151878 0.8589332 #> 17  5.351878 0.8368443 #> 18  5.551878 0.8145375 #> 19  5.751878 0.7922527 #> 20  5.951878 0.7922527 #> 21  6.151878 0.7809792 #> 22  6.351878 0.7584506 #> 23  6.551878 0.7361916 #> 24  6.751878 0.7250806 #> 25  6.951878 0.7137624 #> 26  7.151878 0.7023804 #> 27  7.351878 0.6910631 #> 28  7.551878 0.6573517 #> 29  7.751878 0.6573517 #> 30  7.951878 0.6461274 #> 31  8.151878 0.6123296 #> 32  8.351878 0.5893782 #> 33  8.551878 0.5777416 #> 34  8.751878 0.5548858 #> 35  8.951878 0.5548858 #> 36  9.151878 0.5436819 #> 37  9.351878 0.5217708 #> 38  9.551878 0.5108233 #> 39  9.751878 0.4998672 #> 40  9.951878 0.4670233 #> 41 10.151878 0.4563563 #> 42 10.351878 0.4449410 #> 43 10.551878 0.4449410 #> 44 10.751878 0.4331449 #> 45 10.951878 0.4213851 #> 46 11.151878 0.4093684 #> 47 11.351878 0.4093684 #> 48 11.551878 0.4093684 #> 49 11.751878 0.4093684 #> 50 11.951878 0.4093684 #> 51 12.151878 0.4093684 #> 52 12.351878 0.4093684 #>  ##   # }"}]
